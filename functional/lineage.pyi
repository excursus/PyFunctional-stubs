from functional.execution import ExecutionEngine as ExecutionEngine
from functional.transformations import CACHE_T as CACHE_T
from typing import Any, Optional

class Lineage:
    transformations: Any = ...
    engine: Any = ...
    def __init__(self, prior_lineage: Optional[Any] = ..., engine: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def __getitem__(self, item: Any): ...
    def apply(self, transform: Any) -> None: ...
    def evaluate(self, sequence: Any): ...
    def cache_scan(self): ...
