from typing import Any, Optional

WRITE_MODE: str

class ReusableFile:
    path: Any = ...
    delimiter: Any = ...
    mode: Any = ...
    buffering: Any = ...
    encoding: Any = ...
    errors: Any = ...
    newline: Any = ...
    def __init__(self, path: Any, delimiter: Optional[Any] = ..., mode: str = ..., buffering: int = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ..., newline: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def read(self): ...

class CompressedFile(ReusableFile):
    magic_bytes: Any = ...
    compresslevel: Any = ...
    def __init__(self, path: Any, delimiter: Optional[Any] = ..., mode: str = ..., buffering: int = ..., compresslevel: int = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ..., newline: Optional[Any] = ...) -> None: ...
    @classmethod
    def is_compressed(cls, data: Any): ...

class GZFile(CompressedFile):
    magic_bytes: bytes = ...
    def __init__(self, path: Any, delimiter: Optional[Any] = ..., mode: str = ..., buffering: int = ..., compresslevel: int = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ..., newline: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def read(self): ...

class BZ2File(CompressedFile):
    magic_bytes: bytes = ...
    def __init__(self, path: Any, delimiter: Optional[Any] = ..., mode: str = ..., buffering: int = ..., compresslevel: int = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ..., newline: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def read(self): ...

class XZFile(CompressedFile):
    magic_bytes: bytes = ...
    check: Any = ...
    preset: Any = ...
    format: Any = ...
    filters: Any = ...
    def __init__(self, path: Any, delimiter: Optional[Any] = ..., mode: str = ..., buffering: int = ..., compresslevel: int = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ..., newline: Optional[Any] = ..., check: int = ..., preset: Optional[Any] = ..., filters: Optional[Any] = ..., format: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def read(self): ...

COMPRESSION_CLASSES: Any
N_COMPRESSION_CHECK_BYTES: Any

def get_read_function(filename: Any, disable_compression: Any): ...
def universal_write_open(path: Any, mode: Any, buffering: int = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ..., newline: Optional[Any] = ..., compresslevel: int = ..., format: Optional[Any] = ..., check: int = ..., preset: Optional[Any] = ..., filters: Optional[Any] = ..., compression: Optional[Any] = ...): ...
