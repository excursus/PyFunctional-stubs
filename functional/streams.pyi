from functional.execution import ExecutionEngine as ExecutionEngine, ParallelExecutionEngine as ParallelExecutionEngine
from functional.io import get_read_function as get_read_function
from functional.pipeline import Sequence as Sequence
from functional.util import is_primitive as is_primitive
from typing import Any, Optional

class Stream:
    disable_compression: Any = ...
    max_repr_items: Any = ...
    def __init__(self, disable_compression: bool = ..., max_repr_items: int = ...) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Sequence: ...
    def open(self, path: Any, delimiter: Optional[Any] = ..., mode: str = ..., buffering: int = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ..., newline: Optional[Any] = ...): ...
    def range(self, *args: Any): ...
    def csv(self, csv_file: Any, dialect: str = ..., **fmt_params: Any): ...
    def csv_dict_reader(self, csv_file: Any, fieldnames: Optional[Any] = ..., restkey: Optional[Any] = ..., restval: Optional[Any] = ..., dialect: str = ..., **kwds: Any): ...
    def jsonl(self, jsonl_file: Any): ...
    def json(self, json_file: Any): ...
    def sqlite3(self, conn: Any, sql: Any, parameters: Optional[Any] = ..., *args: Any, **kwargs: Any): ...

class ParallelStream(Stream):
    processes: Any = ...
    partition_size: Any = ...
    def __init__(self, processes: Optional[Any] = ..., partition_size: Optional[Any] = ..., disable_compression: bool = ...) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...

seq: Stream
pseq: ParallelStream
